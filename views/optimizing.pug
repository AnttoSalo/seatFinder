extends layout

block content
    h1.mb-4 Optimizing Seating Arrangement
    p Please wait while we optimize your seating arrangement.

    // Optional: seating visualization placeholder
    div#svg-container(style="width:100%; height:600px; border:1px solid #ccc; overflow:hidden; margin-top:20px;")
        // You can add a loading spinner or diagram here

    // Modal overlay showing progress data.
    div#progressModal(style="position: fixed; top:0; left:0; width:100%; height:100%; background: rgba(0,0,0,0.5); z-index:1050;")
        div(style="position: absolute; top:50%; left:50%; transform: translate(-50%, -50%); background:#fff; padding:20px; border-radius:5px; width:400px;")
            h2 Progress Information
            p Iteration: <span id="iterationDisplay">0</span> / <span id="totalIterations">#{totalIterations}</span>
            p Best Score: <span id="bestScoreDisplay">N/A</span>
            p Temperature: <span id="temperatureDisplay">N/A</span>
            p ETA: <span id="etaDisplay">Calculating...</span>
            // Progress bar
            div.progress(style="height: 20px; background: #e9ecef; border-radius: 5px; overflow: hidden; margin-top: 10px;")
                div#progressBar(style="height:100%; width: 0%; background: #007bff; text-align:center; color:#fff; line-height:20px;")
                    | 0%

    script.
        // Total iterations and start time (embedded from server)
        const totalIterations = !{totalIterations};
        const startTime = !{startTime};

        // Function to format time in hh:mm:ss.
        function formatTime(ms) {
            let totalSec = Math.floor(ms / 1000);
            let hours = Math.floor(totalSec / 3600);
            let minutes = Math.floor((totalSec % 3600) / 60);
            let seconds = totalSec % 60;
            return hours.toString().padStart(2, '0') + ':' +
                minutes.toString().padStart(2, '0') + ':' +
                seconds.toString().padStart(2, '0');
        }

        // Poll the /progress endpoint every second.
        function pollProgress() {
            fetch('/progress')
                .then(response => response.json())
                .then(data => {
                    document.getElementById("iterationDisplay").textContent = data.iteration;
                    let currentScore = parseFloat(document.getElementById("bestScoreDisplay").textContent) || 0;
                    if(data.best_score>currentScore){
                        document.getElementById("bestScoreDisplay").textContent = data.best_score;
                    }
                    document.getElementById("temperatureDisplay").textContent = data.temperature;
                    // Calculate progress percentage.
                    let percent = Math.min(100, (data.iteration / totalIterations) * 100);
                    document.getElementById("progressBar").style.width = percent + "%";
                    document.getElementById("progressBar").textContent = Math.floor(percent) + "%";
                    // Calculate ETA.
                    if (data.iteration > 0) {
                        let elapsed = Date.now() - startTime;
                        let remaining = (elapsed / data.iteration) * (totalIterations - data.iteration);
                        document.getElementById("etaDisplay").textContent = formatTime(remaining);
                    }
                    // If final result is available, redirect to /result.
                    if (data.final_result) {
                        window.location.href = "/result";
                    }
                })
                .catch(err => {
                    console.error("Error fetching progress:", err);
                    document.getElementById("progressModal").innerHTML = "<p>Error fetching progress data.</p>";
                });
        }
        setInterval(pollProgress, 1000);
