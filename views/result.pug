extends layout

block content
  h1.mb-4 Final Seating Arrangement - Visualization

  // Control buttons for swapping and recalculating
  div.mb-3.d-flex
    div
      button#enableSwap.btn.btn-warning Swap Seats
      button#confirmSwap.btn.btn-success.ms-2(style="display:none;") Confirm Swap
      button#cancelSwap.btn.btn-secondary.ms-2(style="display:none;") Cancel Swap
      span#swapMsg.ms-2(style="font-weight: bold;") 
      button#recalcBtn.btn.btn-primary.ms-3 Recalculate Seating
    button#saveJsonBtn.btn.btn-info.ms-auto Save Arrangement as JSON

  // SVG container for pan/zoom.
  div#svg-container(style="width:100%; height:600px; border:1px solid #ccc; overflow:hidden; margin-bottom:20px;")
    svg#seatSvg(width="5000" height="5000")

  // Side-by-side textual representation and statistics.
  div#textualRepresentation
    div.row
      // Left column: seating arrangement textual view.
      div.col-md-6
        h1.mb-4 Final Seating Arrangement (Textual)
        each table, tIdx in seatingArrangement.tables
          div.table-text.mb-3
            h2 Table #{tIdx + 1}
            if bonusConfig === 'left' || bonusConfig === 'both'
              p Bonus Left: #{table.bonus_left}
            p Top Side:
            ul
              each seat in table.top
                li= seat
            p Bottom Side:
            ul
              each seat in table.bottom
                li= seat
            if bonusConfig === 'right' || bonusConfig === 'both'
              p Bonus Right: #{table.bonus_right}
      // Right column: statistics.
      div.col-md-6
        h2 Statistics
        p Average wishes fulfilled per student: #{stats.averageFulfilled}
        h3 Percentage of Wishes Fulfilled Per Student:
        ul
          each item in stats.percentageList
            li #{item.name}: #{item.percentage}%
        h3 Students with No Wishes Fulfilled:
        if stats.noneFulfilled.length > 0
          ul
            each student in stats.noneFulfilled
              li= student
        else
          p None!

  // Client-side scripts.
  script.
    document.addEventListener('DOMContentLoaded', function() {
      window.currentSeatingArrangement = !{JSON.stringify(seatingArrangement)};
      window.currentStats = !{JSON.stringify(stats)};
      window.currentBonusConfig = "!{bonusConfig}";
      window.currentLayoutMode = "!{layoutMode}";
      window.currentLayoutRows = !{layoutRows || 'null'};
      window.currentLayoutColumns = !{layoutColumns || 'null'};
      window.currentL = !{L};
    });

  // Global variables and drawing functions.
  script.
    const seatingArrangement = !{JSON.stringify(seatingArrangement)};
    const bonusConfig = "!{bonusConfig}";
    const L = !{L};
    const numTables = seatingArrangement.tables.length;
    const layoutMode = "!{layoutMode}";
    const layoutRows = !{layoutRows || 'null'};
    const layoutColumns = !{layoutColumns || 'null'};

    // Dimensions optimized for 1080p.
    const seatRadius = 40;
    const seatMargin = 30;
    const baseSeatSpace = seatRadius * 2 + seatMargin;
    const tableWidth = Math.max(1200, (L + 1) * baseSeatSpace);
    const tableHeight = 300;
    const margin = 100;
    const tableSpacingX = tableWidth + 200;
    const tableSpacingY = tableHeight + 200;

    let gridCols, gridRows;
    if (layoutMode === "row") {
      gridCols = numTables;
      gridRows = 1;
    } else if (layoutMode === "column") {
      gridCols = 1;
      gridRows = numTables;
    } else if (layoutMode === "custom") {
      gridCols = parseInt(layoutColumns);
      gridRows = parseInt(layoutRows);
    } else {
      gridCols = Math.ceil(Math.sqrt(numTables));
      gridRows = Math.ceil(numTables / gridCols);
    }

    const svg = document.getElementById('seatSvg');
    let swapMode = false;
    let selectedSeats = [];
    const style = document.createElement('style');
    style.innerHTML = `
      #seatSvg circle {
        transition: fill 0.3s;
        cursor: pointer;
      }
      #seatSvg circle.selected {
        fill: red !important;
      }
    `;
    document.head.appendChild(style);

    function drawSVG(arrangement) {
      while (svg.firstChild) {
        svg.removeChild(svg.firstChild);
      }
      arrangement.tables.forEach((table, tIdx) => {
        const col = tIdx % gridCols;
        const row = Math.floor(tIdx / gridCols);
        const offsetX = margin + col * tableSpacingX;
        const offsetY = margin + row * tableSpacingY;
        const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
        rect.setAttribute("x", offsetX);
        rect.setAttribute("y", offsetY);
        rect.setAttribute("width", tableWidth);
        rect.setAttribute("height", tableHeight);
        rect.setAttribute("fill", "#f8f9fa");
        rect.setAttribute("stroke", "#000");
        svg.appendChild(rect);

        function drawSeat(x, y, name, seatId) {
          const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
          circle.setAttribute("cx", x);
          circle.setAttribute("cy", y);
          circle.setAttribute("r", seatRadius);
          circle.setAttribute("fill", "#007bff");
          circle.setAttribute("stroke", "#000");
          circle.setAttribute("id", seatId);
          svg.appendChild(circle);
          if (name) {
            const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
            text.setAttribute("x", x);
            text.setAttribute("y", y + 4);
            text.setAttribute("text-anchor", "middle");
            text.setAttribute("font-size", "10");
            text.setAttribute("fill", "#fff");
            text.textContent = name;
            text.setAttribute("id", seatId + "_text");
            svg.appendChild(text);
          }
        }

        table.top.forEach((seat, i) => {
          const spacing = tableWidth / (L + 1);
          const x = offsetX + spacing * (i + 1);
          const y = offsetY - seatMargin;
          const seatId = `seat_t${tIdx}_top_${i}`;
          drawSeat(x, y, seat, seatId);
        });
        table.bottom.forEach((seat, i) => {
          const spacing = tableWidth / (L + 1);
          const x = offsetX + spacing * (i + 1);
          const y = offsetY + tableHeight + seatMargin;
          const seatId = `seat_t${tIdx}_bottom_${i}`;
          drawSeat(x, y, seat, seatId);
        });
        if(bonusConfig === "left" || bonusConfig === "both") {
          const x = offsetX - seatMargin;
          const y = offsetY + tableHeight / 2;
          const seatId = `seat_t${tIdx}_bonus_left`;
          drawSeat(x, y, table.bonus_left, seatId);
        }
        if(bonusConfig === "right" || bonusConfig === "both") {
          const x = offsetX + tableWidth + seatMargin;
          const y = offsetY + tableHeight / 2;
          const seatId = `seat_t${tIdx}_bonus_right`;
          drawSeat(x, y, table.bonus_right, seatId);
        }
      });
      if (swapMode) attachSeatClickHandlers();
    }

    drawSVG(seatingArrangement);
    const panZoomInstance = Panzoom(svg, { contain: 'outside' });
    document.getElementById('svg-container').addEventListener('wheel', panZoomInstance.zoomWithWheel);

    const enableSwapBtn = document.getElementById('enableSwap');
    const confirmSwapBtn = document.getElementById('confirmSwap');
    const cancelSwapBtn = document.getElementById('cancelSwap');
    const swapMsg = document.getElementById('swapMsg');

    enableSwapBtn.addEventListener('click', () => {
      swapMode = true;
      selectedSeats = [];
      swapMsg.textContent = "Select two seats to swap.";
      confirmSwapBtn.style.display = "none";
      cancelSwapBtn.style.display = "inline-block";
      attachSeatClickHandlers();
    });

    cancelSwapBtn.addEventListener('click', () => {
      swapMode = false;
      selectedSeats = [];
      swapMsg.textContent = "";
      confirmSwapBtn.style.display = "none";
      cancelSwapBtn.style.display = "none";
      removeSeatSelections();
    });

    confirmSwapBtn.addEventListener('click', () => {
      if (selectedSeats.length !== 2) return;
      swapMsg.textContent = "Swapping...";
      const payload = { seat1: selectedSeats[0], seat2: selectedSeats[1] };
      fetch('/swap', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })
      .then(response => response.json())
      .then(data => {
        window.currentSeatingArrangement = data.seatingArrangement;
        window.currentStats = data.stats;
        window.currentBonusConfig = data.bonusConfig;
        svg.style.opacity = 0;
        setTimeout(() => {
          drawSVG(data.seatingArrangement);
          svg.style.opacity = 1;
        }, 300);
        updateTextualRepresentation(data);
        // Note: updateCharts call removed as charts are not used.
        swapMsg.textContent = "Swap completed.";
        swapMode = false;
        selectedSeats = [];
        confirmSwapBtn.style.display = "none";
        cancelSwapBtn.style.display = "none";
      })
      .catch(err => {
        console.error(err);
        swapMsg.textContent = "Swap failed.";
      });
    });

    function attachSeatClickHandlers() {
      const seats = svg.querySelectorAll("circle");
      seats.forEach(seat => {
        seat.style.cursor = "pointer";
        seat.addEventListener('click', onSeatClick);
      });
    }

    function removeSeatSelections() {
      const seats = svg.querySelectorAll("circle.selected");
      seats.forEach(seat => seat.classList.remove("selected"));
    }

    function onSeatClick(evt) {
      if (!swapMode) return;
      const seatElem = evt.currentTarget;
      const seatId = seatElem.id;
      const parts = seatId.split('_');
      const table = parseInt(parts[1].substring(1));
      const section = parts[2];
      let index = null;
      if (section === 'top' || section === 'bottom') {
        index = parseInt(parts[3]);
      }
      if (seatElem.classList.contains("selected")) {
        seatElem.classList.remove("selected");
        selectedSeats = selectedSeats.filter(s => s.seatId !== seatId);
      } else {
        if (selectedSeats.length < 2) {
          seatElem.classList.add("selected");
          selectedSeats.push({ seatId, table, section, index });
        }
      }
      if (selectedSeats.length === 2) {
        confirmSwapBtn.style.display = "inline-block";
        swapMsg.textContent = "Ready to swap.";
      } else {
        confirmSwapBtn.style.display = "none";
        swapMsg.textContent = "Select two seats to swap.";
      }
    }

    function updateTextualRepresentation(data) {
      const bonusCfg = data.bonusConfig; // use updated bonusConfig
      let html = '<div class="row">';
      // Left column: seating arrangement textual view.
      html += '<div class="col-md-6">';
      html += '<h1 class="mb-4">Final Seating Arrangement (Textual)</h1>';
      data.seatingArrangement.tables.forEach((table, tIdx) => {
        html += `<div class="table-text mb-3"><h2>Table ${tIdx+1}</h2>`;
        if(bonusCfg === 'left' || bonusCfg === 'both')
          html += `<p>Bonus Left: ${table.bonus_left || ""}</p>`;
        html += `<p>Top Side:</p><ul>`;
        table.top.forEach(seat => { html += `<li>${seat || ""}</li>`; });
        html += `</ul><p>Bottom Side:</p><ul>`;
        table.bottom.forEach(seat => { html += `<li>${seat || ""}</li>`; });
        html += `</ul>`;
        if(bonusCfg === 'right' || bonusCfg === 'both')
          html += `<p>Bonus Right: ${table.bonus_right || ""}</p>`;
        html += `</div>`;
      });
      html += '</div>'; // end left column

      // Right column: statistics.
      html += '<div class="col-md-6">';
      html += '<h2>Statistics</h2>';
      html += `<p>Average wishes fulfilled per student: ${data.stats.averageFulfilled}</p>`;
      html += '<h3>Percentage of Wishes Fulfilled Per Student:</h3><ul>';
      data.stats.percentageList.forEach(item => {
        html += `<li>${item.name}: ${item.percentage}%</li>`;
      });
      html += '</ul><h3>Students with No Wishes Fulfilled:</h3>';
      if (data.stats.noneFulfilled.length > 0) {
        html += '<ul>';
        data.stats.noneFulfilled.forEach(student => {
          html += `<li>${student}</li>`;
        });
        html += '</ul>';
      } else {
        html += '<p>None!</p>';
      }
      html += '</div></div>'; // end right column and row

      document.getElementById('textualRepresentation').innerHTML = html;
    }

    document.getElementById('recalcBtn').addEventListener('click', function() {
      const recalcBtn = document.getElementById('recalcBtn');
      recalcBtn.disabled = true;
      recalcBtn.textContent = "Recalculating...";
      fetch('/recalculate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      })
      .then(response => response.json())
      .then(data => {
        window.currentSeatingArrangement = data.seatingArrangement;
        window.currentStats = data.stats;
        window.currentBonusConfig = data.bonusConfig;
        const svg = document.getElementById('seatSvg');
        svg.style.opacity = 0;
        setTimeout(() => {
          drawSVG(data.seatingArrangement);
          svg.style.opacity = 1;
        }, 300);
        updateTextualRepresentation(data);
        recalcBtn.disabled = false;
        recalcBtn.textContent = "Recalculate Seating";
      })
      .catch(err => {
        console.error(err);
        recalcBtn.disabled = false;
        recalcBtn.textContent = "Recalculate Seating";
      });
    });

    document.getElementById('saveJsonBtn').addEventListener('click', function() {
      const dataToSave = {
        seatingArrangement: window.currentSeatingArrangement,
        stats: window.currentStats,
        bonusConfig: window.currentBonusConfig,
        layoutMode: window.currentLayoutMode,
        layoutRows: window.currentLayoutRows,
        layoutColumns: window.currentLayoutColumns,
        L: window.currentL
      };

      const dataStr = JSON.stringify(dataToSave, null, 2);
      const blob = new Blob([dataStr], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "seatingArrangement.json";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });
