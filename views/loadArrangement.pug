extends layout

block content
  h1.mb-4 Loaded Seating Arrangement

  // SVG container for the visual representation.
  div#svg-container(style="width:100%; height:600px; border:1px solid #ccc; overflow:hidden; margin-bottom:20px;")
    svg#seatSvg(width="5000" height="5000")

  // A container for the textual seating & stats if desired.
  div#textualRepresentation

  script.
    (function() {
      // Retrieve the saved arrangement from localStorage.
      const dataStr = localStorage.getItem("loadedArrangement");
      if (!dataStr) {
        document.getElementById("svg-container").innerHTML = "<p>No arrangement found in local storage.</p>";
        return;
      }
      const dataLoaded = JSON.parse(dataStr);
      localStorage.removeItem("loadedArrangement");

      // Retrieve saved grid/layout parameters from the loaded JSON.
      // These should have been saved along with the arrangement.
      const seatingArrangement = dataLoaded.seatingArrangement.tables;
      const bonusConfig = dataLoaded.bonusConfig;
      const savedL = dataLoaded.L;  // number of seats per long side
      const layoutMode = dataLoaded.layoutMode || "auto";
      const layoutRows = dataLoaded.layoutRows;      // may be undefined if not custom
      const layoutColumns = dataLoaded.layoutColumns;  // may be undefined if not custom

      // Use saved L if available, otherwise compute from the first table.
      const L = savedL || (seatingArrangement.length > 0 ? seatingArrangement[0].top.length : 0);

      // Use same dimensions as on your result page.
      const seatRadius = 40;
      const seatMargin = 30;
      const baseSeatSpace = seatRadius * 2 + seatMargin;
      const tableWidth = Math.max(1200, (L + 1) * baseSeatSpace);
      const tableHeight = 300;
      const margin = 100;
      const tableSpacingX = tableWidth + 200;
      const tableSpacingY = tableHeight + 200;

      // Compute grid dimensions using the saved layout info.
      let gridCols, gridRows;
      if (layoutMode === "row") {
        gridCols = seatingArrangement.length;
        gridRows = 1;
      } else if (layoutMode === "column") {
        gridCols = 1;
        gridRows = seatingArrangement.length;
      } else if (layoutMode === "custom" && layoutColumns && layoutRows) {
        gridCols = parseInt(layoutColumns);
        gridRows = parseInt(layoutRows);
      } else { // auto
        gridCols = Math.ceil(Math.sqrt(seatingArrangement.length));
        gridRows = Math.ceil(seatingArrangement.length / gridCols);
      }

      // Define the drawSVG function using the above values.
      function drawSVG(arrangement) {
        const svg = document.getElementById('seatSvg');
        while (svg.firstChild) {
          svg.removeChild(svg.firstChild);
        }
        arrangement.forEach((table, tIdx) => {
          const col = tIdx % gridCols;
          const row = Math.floor(tIdx / gridCols);
          const offsetX = margin + col * tableSpacingX;
          const offsetY = margin + row * tableSpacingY;
          const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
          rect.setAttribute("x", offsetX);
          rect.setAttribute("y", offsetY);
          rect.setAttribute("width", tableWidth);
          rect.setAttribute("height", tableHeight);
          rect.setAttribute("fill", "#f8f9fa");
          rect.setAttribute("stroke", "#000");
          svg.appendChild(rect);

          function drawSeat(x, y, name, seatId) {
            const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
            circle.setAttribute("cx", x);
            circle.setAttribute("cy", y);
            circle.setAttribute("r", seatRadius);
            circle.setAttribute("fill", "#007bff");
            circle.setAttribute("stroke", "#000");
            circle.setAttribute("id", seatId);
            svg.appendChild(circle);
            if (name) {
              const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
              text.setAttribute("x", x);
              text.setAttribute("y", y + 4);
              text.setAttribute("text-anchor", "middle");
              text.setAttribute("font-size", "10");
              text.setAttribute("fill", "#fff");
              text.textContent = name;
              text.setAttribute("id", seatId + "_text");
              svg.appendChild(text);
            }
          }

          table.top.forEach((seat, i) => {
            const spacing = tableWidth / (L + 1);
            const x = offsetX + spacing * (i + 1);
            const y = offsetY - seatMargin;
            const seatId = `seat_t${tIdx}_top_${i}`;
            drawSeat(x, y, seat, seatId);
          });
          table.bottom.forEach((seat, i) => {
            const spacing = tableWidth / (L + 1);
            const x = offsetX + spacing * (i + 1);
            const y = offsetY + tableHeight + seatMargin;
            const seatId = `seat_t${tIdx}_bottom_${i}`;
            drawSeat(x, y, seat, seatId);
          });
          if(bonusConfig === "left" || bonusConfig === "both") {
            const x = offsetX - seatMargin;
            const y = offsetY + tableHeight / 2;
            const seatId = `seat_t${tIdx}_bonus_left`;
            drawSeat(x, y, table.bonus_left, seatId);
          }
          if(bonusConfig === "right" || bonusConfig === "both") {
            const x = offsetX + tableWidth + seatMargin;
            const y = offsetY + tableHeight / 2;
            const seatId = `seat_t${tIdx}_bonus_right`;
            drawSeat(x, y, table.bonus_right, seatId);
          }
        });
      }

      drawSVG(seatingArrangement);

      // Initialize Panzoom.
      const panZoomInstance = Panzoom(document.getElementById('seatSvg'), { contain: 'outside' });
      document.getElementById('svg-container').addEventListener('wheel', panZoomInstance.zoomWithWheel);

      // Update textual representation (if needed).
      function updateTextualRepresentation(data) {
        const bonusCfg = data.bonusConfig;
        let html = '<div class="row">';

        // Left column: seating arrangement textual view.
        html += '<div class="col-md-6">';
        html += '<h1 class="mb-4">Final Seating Arrangement (Textual)</h1>';
        data.seatingArrangement.tables.forEach((table, tIdx) => {
          html += `<div class="table-text mb-3"><h2>Table ${tIdx+1}</h2>`;
          if(bonusCfg === 'left' || bonusCfg === 'both')
            html += `<p>Bonus Left: ${table.bonus_left || ""}</p>`;
          html += `<p>Top Side:</p><ul>`;
          table.top.forEach(seat => { html += `<li>${seat || ""}</li>`; });
          html += `</ul><p>Bottom Side:</p><ul>`;
          table.bottom.forEach(seat => { html += `<li>${seat || ""}</li>`; });
          html += `</ul>`;
          if(bonusCfg === 'right' || bonusCfg === 'both')
            html += `<p>Bonus Right: ${table.bonus_right || ""}</p>`;
          html += `</div>`;
        });
        html += '</div>'; // end left column

        // Right column: statistics.
        html += '<div class="col-md-6">';
        html += '<h2>Statistics</h2>';
        html += `<p>Average wishes fulfilled per student: ${data.stats.averageFulfilled}</p>`;
        html += '<h3>Percentage of Wishes Fulfilled Per Student:</h3><ul>';
        data.stats.percentageList.forEach(item => {
          html += `<li>${item.name}: ${item.percentage}%</li>`;
        });
        html += '</ul>';
        html += '<h3>Students with No Wishes Fulfilled:</h3>';
        if (data.stats.noneFulfilled.length > 0) {
          html += '<ul>';
          data.stats.noneFulfilled.forEach(student => {
            html += `<li>${student}</li>`;
          });
          html += '</ul>';
        } else {
          html += '<p>None!</p>';
        }
        html += '</div>'; // end right column

        html += '</div>'; // end row

        document.getElementById('textualRepresentation').innerHTML = html;
      }


      updateTextualRepresentation(dataLoaded);
    })();

